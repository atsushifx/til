<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://api.github.com/repos/atsushifx/til/commits/latest</id>
    <title>atsushifx / TIL</title>
    <updated>2025-08-27T18:24:44.000Z</updated>
    <generator>https://github.com/atsushifx/commit2feed</generator>
    <author>
        <name>atsushifx</name>
        <uri>https://github.com/atsushifx</uri>
    </author>
    <link rel="alternate" href="https://api.github.com/repos/atsushifx/til/commits/latest"/>
    <subtitle>Latest 10 commits for atsushifx / TIL</subtitle>
    <entry>
        <title type="html"><![CDATA[docs(2025-08): 2025年8月27日: パッケージ再構成のドキュメント化とエラーハンドリングパッケージの追加]]></title>
        <id>67d5b32eb87ccf4e49107746ccab22714f948da1</id>
        <link href="https://github.com/atsushifx/til/commit/67d5b32eb87ccf4e49107746ccab22714f948da1"/>
        <updated>2025-08-27T18:24:44.000Z</updated>
        <summary type="html"><![CDATA[docs(2025-08): 2025年8月27日: パッケージ再構成のドキュメント化とエラーハンドリングパッケージの追加

- docs/2025/2025-08.md:
  パッケージの再構成およびエラーハンドリングパッケージの作成に関するドキュメント]]></summary>
        <content type="html"><![CDATA[docs/2025/2025-08.md

### 2025年8月27日 -- パッケージ再編、およびエラーハンドリングパッケージ作成

#### 作業概要

1. **パッケージ再編**
   - error 関連を `@esta-core/esta-error` に統合

2. **/shared パッケージ整理**
   - `/base` を廃止し、`/shared/types`, `/shared/constants` にリファクタリング
   - `@shared/types` に `AglaError` 基底クラスを追加

3. **@esta-core/esta-error 実装**]]></content>
        <author>
            <name>Furukawa Atsushi</name>
            <email>atsushifx@gmail.com</email>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[docs(2025-08): 2025年8月24日: AgLoggerのE2Eテストをリファクタリング、リストラクチャラインへマージ]]></title>
        <id>f1b3d7294e308ed6831ab9d6e890091e624f2d93</id>
        <link href="https://github.com/atsushifx/til/commit/f1b3d7294e308ed6831ab9d6e890091e624f2d93"/>
        <updated>2025-08-24T16:38:41.000Z</updated>
        <summary type="html"><![CDATA[docs(2025-08): 2025年8月24日: AgLoggerのE2Eテストをリファクタリング、リストラクチャラインへマージ

- docs/2025/2025-08.md:
  AgLoggerのE2Eテストリファクタリングに関する詳細な更新を追加。シナリオごとにテストを再構成し、型安全性を向上
  古いE2Eテストを削除し、ケースをより明確なシナリオベースの構造に統合
  一貫した命名規則、JSDocコメント、出力別ディレクトリ構成でコードの明確さを強化]]></summary>
        <content type="html"><![CDATA[docs/2025/2025-08.md

### 2025年8月24日 -- AgLogger E2Eテストリファクタリング完了 および restructureラインへのマージ

#### コンソール出力側E2Eテストの構造再設計

- `console-output/` 配下のテストを**シナリオベース**に全面再編成
- テスト内容を以下の観点で整理・拡充:
  - アプリケーションライフサイクル
  - ログレベルフィルタリング
  - ロガー設定の変更／永続化
  - 出力フォーマット（JSON / Plain）の最適化

#### コード品質と型の強化]]></content>
        <author>
            <name>Furukawa Atsushi</name>
            <email>atsushifx@gmail.com</email>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[docs(2025-08): 2025年8月23日: テストをリファクタリングし、厳格な出力制御によるログ記録を強化]]></title>
        <id>3cb55ee7a5b6d97864bcea6003d53ff715e6acde</id>
        <link href="https://github.com/atsushifx/til/commit/3cb55ee7a5b6d97864bcea6003d53ff715e6acde"/>
        <updated>2025-08-23T15:35:09.000Z</updated>
        <summary type="html"><![CDATA[docs(2025-08): 2025年8月23日: テストをリファクタリングし、厳格な出力制御によるログ記録を強化

- docs/2025/2025-08.md:
  出力ベースの分類とシナリオ重視の構造を導入した大規模なE2Eテストのリファクタ
  無効およびnull入力に対する堅牢な処理を伴うAgLoggerのログレベル検証を強化
  ESLint調整およびカスタムcspell辞書統合による開発環境の改善
  単体テストと機能テストを分離し、明確さと保守性を高めたテストアーキテクチャの再設計
  テストごとに厳格なBDDサイクルを採用し、describe/itの使い方を明確化して可読性向上
  ログレベル設定に関わらず常にログ出力を強制するFORCE_OUTPUT機能を追加]]></summary>
        <content type="html"><![CDATA[docs/2025/2025-08.md

### 2025年8月23日 -- AgLogger E2Eテスト構造化とBDDプロセス実践

#### 📦 E2Eテスト基盤の大幅リファクタリング

- **出力先別のテスト分類**
  E2E テストは **出力先 (Console / Mock)** を基準にディレクトリを分離し、テスト戦略を明確化。
  - Console 出力: 実動作ベースのテスト
  - MockLogger 出力: ロジック検証や副作用抑制向けテスト
- **シナリオベースのE2E構造**
  目的ごとにユースケース（＝ログ出力の使い方）を定義し、それに沿ってシナリオテストを構成。
- **ユニットテスト階層化**
  `units/` 配下に機能単位で集約し、低レベルのテストを独立化。]]></content>
        <author>
            <name>Furukawa Atsushi</name>
            <email>atsushifx@gmail.com</email>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[docs(2025-08): 2025年8月19日: エンドツーエンドテストのリファクタリング]]></title>
        <id>abf3d79eb8c1c1821f9e454ce0ed83a7abb9cc20</id>
        <link href="https://github.com/atsushifx/til/commit/abf3d79eb8c1c1821f9e454ce0ed83a7abb9cc20"/>
        <updated>2025-08-19T15:52:09.000Z</updated>
        <summary type="html"><![CDATA[docs(2025-08): 2025年8月19日: エンドツーエンドテストのリファクタリング

- docs/2025/2025-08.md:
  AgLoggerのe2eテストリファクタリングに関する詳細な概要を追加。
  テストの分類、コンソールモックヘルパーの統合、リンター修正、およびMockLoggerのバグ修正を含む]]></summary>
        <content type="html"><![CDATA[docs/2025/2025-08.md

### 2025年8月19日 — AgLogger -- e2eテストを再構成

#### 今日の作業まとめ

1. **E2Eテストの再構成**
   - E2E テストを「コンソール出力系」「モック出力系」に分類して整理。
   - 出力や振る舞いごとに明確なスイートへ分割し、テストの役割を明確化。

2. **コンソール出力用ヘルパーの統合**
   - 各テストに散らばっていた console モック処理を外部ヘルパーに抽出。
   - `setupTest()` ルーチンを導入し、安全なモックセットアップと自動復元を一元化。]]></content>
        <author>
            <name>Furukawa Atsushi</name>
            <email>atsushifx@gmail.com</email>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[docs(2025-08): 2025/08/15: MockFormatterのリファクタリングとテストアーキテクチャおよびドキュメントの強化]]></title>
        <id>bca513a398c4a52baef33a86c8cf215ed0f4a3fc</id>
        <link href="https://github.com/atsushifx/til/commit/bca513a398c4a52baef33a86c8cf215ed0f4a3fc"/>
        <updated>2025-08-16T10:23:41.000Z</updated>
        <summary type="html"><![CDATA[docs(2025-08): 2025/08/15: MockFormatterのリファクタリングとテストアーキテクチャおよびドキュメントの強化

- docs/2025/2025-08.md:
  クラスのコンストラクタをカリー化&ファクトリー化し、formmaterルーチンをクラスに動的に設定可能に
  インスタンス生成、統計情報、自動フォーマッター統合をカバーするBDDスタイルへのテスト刷新
  再利用性向上のためにisAgMockConstructor型ガードをAgLogValidatorsへ移動し、包括的なテストを追加
  カリー化の利点、テスト設計の進化、統一的なバリデーションロジックに関する主要な学びを記載
  フォーマッターの柔軟性および拡張性の改善と、強化されたテストアーキテクチャの概要をまとめる]]></summary>
        <content type="html"><![CDATA[docs/2025/2025-08.md

### 2025年8月15日 — AgLogger -- MockFormatterの大規模リファクタリング

#### 作業内容

- **クラスコンストラクターのカリー化**
  - `MockFormatter` をファクトリーパターンに移行。
  - コンストラクターをカリー化し、`passThrough` などのルーチンをダイナミックに `bind` 可能にした。
  - プリセット (prefix, timestamp など) を導入し、拡張性を向上。

- **テスト刷新**
  - 旧来のテストを整理し、新しいプリセットやカリー化されたクラスの挙動を検証。
  - インスタンス生成、統計トラッキング、フォーマッタの一貫性を確認。]]></content>
        <author>
            <name>Furukawa Atsushi</name>
            <email>atsushifx@gmail.com</email>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[docs(2025-08): 2025年8月14日: AgLogger 統合の追加とエンドツーエンドテストのリファクタリング]]></title>
        <id>1ac634e52773f229385e915495796864375e3160</id>
        <link href="https://github.com/atsushifx/til/commit/1ac634e52773f229385e915495796864375e3160"/>
        <updated>2025-08-14T14:15:11.000Z</updated>
        <summary type="html"><![CDATA[docs(2025-08): 2025年8月14日: AgLogger 統合の追加とエンドツーエンドテストのリファクタリング

- docs/2025/2025-08.md:
  AgLogger 統合および E2E テストリファクタリングに関する詳細レポート
  テストの整理改善、API の統一、型安全性の向上]]></summary>
        <content type="html"><![CDATA[docs/2025/2025-08.md

### 2025年8月14日 — AgLogger -- インテグレーションテスト/E2Eテストのリファクタリング

#### 🔧 作業内容まとめ

##### ✅ E2eMockLoggerの機能強化

- 特別なログレベル `DEFAULT` をサポートするよう拡張。
- 実際のユースケースを模した柔軟な E2E テスト環境を実現。

##### ✅ テスト構造の再編成

- E2E/統合/ユーティリティのテストを分類ベースで再構成。]]></content>
        <author>
            <name>Furukawa Atsushi</name>
            <email>atsushifx@gmail.com</email>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[docs(2025-08): 2025年8月11日: AgLoggerManagerの大規模改修およびテストフレームワークヘルパーの統一]]></title>
        <id>97bbb3a10c5e9881b90027c94a563ad5401f3f5a</id>
        <link href="https://github.com/atsushifx/til/commit/97bbb3a10c5e9881b90027c94a563ad5401f3f5a"/>
        <updated>2025-08-11T23:45:25.000Z</updated>
        <summary type="html"><![CDATA[docs(2025-08): 2025年8月11日: AgLoggerManagerの大規模改修およびテストフレームワークヘルパーの統一

- docs/2025/2025-08.md:
  AgLoggerManagerの大幅改修と、
  統一されたヘルパーおよび改善されたバリデーションを備えたテストフレームワークについての詳細な概要を追加]]></summary>
        <content type="html"><![CDATA[docs/2025/2025-08.md

### 2025年8月11日 — AgLoggerManagerとテスト基盤の大規模刷新

#### 📌 今日の作業まとめ（2–3行）

AgLoggerManager の構造を全面的に見直し、設定バリデーション・エラーハンドリングを強化。
統合テストは全スイートを再編成し、`defaultLoggerMap` の導入や `getLoggerFunction` ベースのアサーションに統一。
ヘルパー関数 `AgLogHelpers` を新設してフォーマッタやバリデータの共通ロジックを一元化。

#### 📚 学びと気づき

- **一貫したテスト構造**は、可読性と保守性を向上させる。機能別スイート分割＋モック強化は長期運用で効く。
- **設定とバリデーションの集中管理**により、複雑な変更でも安全に反映可能になった。]]></content>
        <author>
            <name>Furukawa Atsushi</name>
            <email>atsushifx@gmail.com</email>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[docs(2025-08): 2025年8月10日: agla-loggerのAPIを統一し、ログ検証を改善]]></title>
        <id>33e2a2afd4503dd56b4cc6fcf39936047fda05b8</id>
        <link href="https://github.com/atsushifx/til/commit/33e2a2afd4503dd56b4cc6fcf39936047fda05b8"/>
        <updated>2025-08-10T14:25:57.000Z</updated>
        <summary type="html"><![CDATA[docs(2025-08): 2025年8月10日: agla-loggerのAPIを統一し、ログ検証を改善

- docs/2025/2025-08.md: API統一、検証の集中化、ロガーのリネーム、テスト構造の再編を伴うagla-loggerリファクタリングの詳細な概要を追加]]></summary>
        <content type="html"><![CDATA[docs/2025/2025-08.md

### 2025年8月10日 -- agla-logger リベース／リファクタリング

#### 作業内容

- AgLogger の API を刷新（`logLevel`/`verbose` の統一、`FORCE_OUTPUT` レベル追加、`createLogger`/`getLogger` 分離）。
- バリデーションを AgLogValidator に集中化し、安全性とエラーメッセージを強化。
- MockLogger を TBufferLogger にリネームし、フォーマッタとロガーの出力仕様を改善。
- テストを機能別に大規模再編（ユニット・統合・E2E 分割）し、冗長削除とカバレッジ拡張。

#### 学び・気づき

- ログ API はアクセサ統一とバリデーション集中化で保守性が飛躍的に向上する。]]></content>
        <author>
            <name>Furukawa Atsushi</name>
            <email>atsushifx@gmail.com</email>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[docs(2025-08) 2025年8月6日: ユニットテストを振る舞い、期待別に分割、リファクタリング]]></title>
        <id>9fbfa4d9cfd83f02dae587a180046714773718c5</id>
        <link href="https://github.com/atsushifx/til/commit/9fbfa4d9cfd83f02dae587a180046714773718c5"/>
        <updated>2025-08-06T22:36:52.000Z</updated>
        <summary type="html"><![CDATA[docs(2025-08) 2025年8月6日: ユニットテストを振る舞い、期待別に分割、リファクタリング

- docs/2025/2025-08.md:
  atsushifx スタイルの BDD プロセスを用いた
  大規模ユニットテストリファクタリング]]></summary>
        <content type="html"><![CDATA[docs/2025/2025-08.md

### 2025年8月6日 -- agla-logger ユニットテストの大規模リファクタリング

#### 🧪 TIL要約

ユニットテストを対象に、**atsushifx式BDDプロセス**を用いてテスト自体を含む大規模リファクタリングを実施。
validation 責務の再設計・API 変更・テスト削除など多岐にわたる変更を**小さなサイクルで安全に完遂**した。

#### ✅ 実施内容ハイライト

- **setLoggerConfig** の API を `boolean` → `void` に変更
- **validateLogLevel** 系のロジック・テストを完全削除
- テスト修正 → コード修正 → 即テスト実行のサイクルを徹底]]></content>
        <author>
            <name>Furukawa Atsushi</name>
            <email>atsushifx@gmail.com</email>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[docs(2025-08): 2025年8月5日: MCPセットアップドキュメントの改善とログ検証の強化]]></title>
        <id>8f2f6126b0ff376f65d91204b286b8ae27f44c50</id>
        <link href="https://github.com/atsushifx/til/commit/8f2f6126b0ff376f65d91204b286b8ae27f44c50"/>
        <updated>2025-08-06T20:20:03.000Z</updated>
        <summary type="html"><![CDATA[docs(2025-08): 2025年8月5日: MCPセットアップドキュメントの改善とログ検証の強化

- docs/2025/2025-08.md: M
  CP環境設定およびWindows安定性のための手動構成を記載
  AgLoggerのログレベル検証機能を追加し、検証ロジックを集中管理
  早期エラー検出に関する考察と、新技術導入と保守性のバランスについて追記]]></summary>
        <content type="html"><![CDATA[docs/2025/2025-08.md

### 2025年8月5日 -- agla-logger mcp導入、リファクタリング用基盤整備

### 2025年8月5日 -- agla-logger MCP導入、リファクタリング用基盤整備

#### 🧠 MCP環境の導入と設定

##### 導入ツール

- [`serena-mcp`](https://github.com/oraios/serena): セマンティックコーディング支援の MCP サーバー
- [`@mizchi/lsmcp`](https://github.com/mizchi/lsmcp): TypeScript 向け LSP ラッパーとして活用

##### 注意点]]></content>
        <author>
            <name>Furukawa Atsushi</name>
            <email>atsushifx@gmail.com</email>
        </author>
    </entry>
</feed>
