<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://api.github.com/repos/atsushifx/til/commits/latest</id>
    <title>atsushifx / TIL</title>
    <updated>2025-07-29T16:12:01.000Z</updated>
    <generator>https://github.com/atsushifx/commit2feed</generator>
    <author>
        <name>atsushifx</name>
        <uri>https://github.com/atsushifx</uri>
    </author>
    <link rel="alternate" href="https://api.github.com/repos/atsushifx/til/commits/latest"/>
    <subtitle>Latest 10 commits for atsushifx / TIL</subtitle>
    <entry>
        <title type="html"><![CDATA[docs(2025-07): 2025年7月29日: リファクタリング計画作成、およびフェーズ2実装開始]]></title>
        <id>bafd7277ef93b490b889b68e6f8570a1f17e1ee3</id>
        <link href="https://github.com/atsushifx/til/commit/bafd7277ef93b490b889b68e6f8570a1f17e1ee3"/>
        <updated>2025-07-29T16:12:01.000Z</updated>
        <summary type="html"><![CDATA[docs(2025-07): 2025年7月29日: リファクタリング計画作成、およびフェーズ2実装開始

- AgLoggerリファクタリング計画と実装概要を詳細に追加
- 統一ログ出力用のexecuteLog導入およびAgLoggerConfigによる設定委譲を追加]]></summary>
        <content type="html"><![CDATA[docs/2025/2025-07.md

### 2025年7月29日 -- AgLoggerリファクタリング - 計画策定、実装

#### 📘 リファクタリング計画の策定

- t-wada 式 TDD を継続し、expect、さらに細かいレベルで Red-Green-Refactor を実施する粒度で記述

- `refactor-agLogger-phase2.tasks.md` を新規作成
  - 目的：`AgLogger` に `AgLoggerConfig` を組み込み、設定責務を委譲する設計
  - 各タスクを 7 カテゴリ（設定統合、委譲、ログ出力、段階的移行、E2E、エラー処理、型＆JSDoc）に分類
- 各フェーズ完了後の成果物・品質基準・注意点を事前に文書化
- `executeLog()` や `setAgLoggerOptions()` など、今後追加されるべき API の要件を明示]]></content>
        <author>
            <name>Furukawa Atsushi</name>
            <email>atsushifx@gmail.com</email>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[docs(2025-07): 2025年7月28日: AgLoggerリファクタリング フェーズ1の詳細]]></title>
        <id>26db661b71649e02862c930ca9c33cd8e3663dad</id>
        <link href="https://github.com/atsushifx/til/commit/26db661b71649e02862c930ca9c33cd8e3663dad"/>
        <updated>2025-07-28T22:47:42.000Z</updated>
        <summary type="html"><![CDATA[docs(2025-07): 2025年7月28日: AgLoggerリファクタリング フェーズ1の詳細

- AgLoggerリファクタリングフェーズ1にもとづいて、AgLoggerConfigクラスを作成]]></summary>
        <content type="html"><![CDATA[docs/2025/2025-07.md

### 2025年7月28日 -- AgLoggerリファクタリング - フェーズ1完了

#### 🎯 概要

`@agla-utils/ag-logger` のリファクタリングにおける **AgLoggerConfig クラスの内部実装フェーズ1** を完了。
設定の一元管理とログ出力制御を担う中核モジュールとして設計・実装。

#### 🧩 実装内容

##### 設定クラスの定義と初期化

- `AgLoggerConfig` クラスを定義 (内部専用)]]></content>
        <author>
            <name>Furukawa Atsushi</name>
            <email>atsushifx@gmail.com</email>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ci: update gitleaks version to 8.28]]></title>
        <id>b6b6ffc38bce3329475eced5d6a7ef99533f5711</id>
        <link href="https://github.com/atsushifx/til/commit/b6b6ffc38bce3329475eced5d6a7ef99533f5711"/>
        <updated>2025-07-27T00:00:59.000Z</updated>
        <summary type="html"><![CDATA[ci: update gitleaks version to 8.28]]></summary>
        <content type="html"><![CDATA[.github/workflows/ci-secrets-scan.yaml

  GITLEAKS_VERSION: 8.28.0]]></content>
        <author>
            <name>Furukawa Atsushi</name>
            <email>atsushifx@gmail.com</email>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[docs(2025-07): 2025年7月の進捗報告を追加 - 主要プロジェクトのアップデートを網羅]]></title>
        <id>c906261da8f3900261730bffd8325b25a35d08cd</id>
        <link href="https://github.com/atsushifx/til/commit/c906261da8f3900261730bffd8325b25a35d08cd"/>
        <updated>2025-07-23T15:41:03.000Z</updated>
        <summary type="html"><![CDATA[docs(2025-07): 2025年7月の進捗報告を追加 - 主要プロジェクトのアップデートを網羅

- docs/2025/2025-07.md:
  esta-config開発、
  ag-loggerのLogLevel強化、
  kiroコマンド実装、
  インフラ改善]]></summary>
        <content type="html"><![CDATA[docs/2025/2025-07.md

### 2025年7月23日 -- ESTA (@esta-core/esta-config パッケージ開発)

#### 1. `@esta-core/esta-config` パッケージ開発 (現在進行中)

ステータス: 開発中 (ブランチ: `feat/esta-config/setup`)

- 最新コミット: 設定読み込み機能を実装 (f81064e)
- 目的: CLI ツールインストール設定の統一管理システム
- 主要機能:
  - 複数フォーマット対応の設定読み込み (TypeScript, JSON, YAML, JS)
  - Valibot スキーマによる型安全なバリデーション
  - 設定ファイルの自動検出 (`estarc`, `esta.config`)]]></content>
        <author>
            <name>Furukawa Atsushi</name>
            <email>atsushifx@gmail.com</email>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[docs(2025-07): 2025年7月20日: /kiroコマンドの開発、新規モジュール開発開始]]></title>
        <id>ffbde1449aa082e05ecad1d436654dd1b2d84ee3</id>
        <link href="https://github.com/atsushifx/til/commit/ffbde1449aa082e05ecad1d436654dd1b2d84ee3"/>
        <updated>2025-07-20T18:00:59.000Z</updated>
        <summary type="html"><![CDATA[docs(2025-07): 2025年7月20日: /kiroコマンドの開発、新規モジュール開発開始]]></summary>
        <content type="html"><![CDATA[docs/2025/2025-07.md

### 2025年7月20日 -- ESTA(tools-configモジュール完成、テスト変更)

#### ✅ 作業概要

<!-- textlint-disable @textlint-ja/ai-writing/no-ai-list-formatting -->

- 📦 `esta-config` モジュールの立ち上げ
  - 初期パッケージ構成（`index.ts` の scaffold 含む）
  - `ag-logger` の `LogLevel` サポートを組み込んだデフォルト設定を追加
  - テスト・build 準備を含むパッケージ初期化完了

- 🔧 `ag-logger` のリファクタリング]]></content>
        <author>
            <name>Furukawa Atsushi</name>
            <email>atsushifx@gmail.com</email>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[docs(2025-07): 2025年7月18日: CIテストをE2E, Integration に分割]]></title>
        <id>3c85f51eb2fd26cb556f2ffeed1b4a1841ca9d38</id>
        <link href="https://github.com/atsushifx/til/commit/3c85f51eb2fd26cb556f2ffeed1b4a1841ca9d38"/>
        <updated>2025-07-18T16:08:30.000Z</updated>
        <summary type="html"><![CDATA[docs(2025-07): 2025年7月18日: CIテストをE2E, Integration に分割

- textlintによる日本語の問題を修正]]></summary>
        <content type="html"><![CDATA[docs/2024/2024-04.md

- 達人プログラマー(第2版) 1 章を読んだ:
    - 新しいプログラミング言語を覚える (年に 1 つ)
    - チームにいるのは、IT エンジニアだけではない
------
docs/2024/2024-05.md

  リポジトリ名を変更、ISSUE TEMPLATE を.GitHub に移動
  GitHub の各リポジトリの Global 設定、ISSUE TEMPLATE を追加してリポジトリを作成
  file-opener 用に docfx をカスタマイズ
  API ドキュメント作成用に`docfx`を組み込み
------
docs/2025/2025-02.md

- GitHub 用に GnuPG による署名を設定
- 開発用 PC に Windows を再インストール、再度環境構築]]></content>
        <author>
            <name>Furukawa Atsushi</name>
            <email>atsushifx@gmail.com</email>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[docs(2025-07): 2025年7月16日: tools-configのバリデーション強化およびクロスプラットフォームのパス処理改善]]></title>
        <id>53b790b5a8d075068a3389d04d42c9b494706bf1</id>
        <link href="https://github.com/atsushifx/til/commit/53b790b5a8d075068a3389d04d42c9b494706bf1"/>
        <updated>2025-07-16T15:52:30.000Z</updated>
        <summary type="html"><![CDATA[docs(2025-07): 2025年7月16日: tools-configのバリデーション強化およびクロスプラットフォームのパス処理改善

- 2025-07.md:
  tools-configモジュールのスキーマバリデーションと包括的なBDDスタイルのテストを詳述
  レガシーサンプルデータを削除し、クロスプラットフォーム正規化を用いたデフォルトパスのバリデーションロジックを強化。
  valibot正規化、クロスプラットフォームパス処理、およびテストの保守性向上の利点を強調。]]></summary>
        <content type="html"><![CDATA[docs/2025/2025-07.md

### 2025年7月16日 -- ESTA(tools-config) におけるスキーマバリデーションとテスト整備

#### 📌 作業概要

- `@esta-core/tools-config` モジュールに対して **valibot スキーマバリデーション機構**と**包括的なテストスイート**を実装。
- デフォルトツール設定のスキーマ正規化を導入し、Windows/Unix 両対応のパス処理を整備。
- テスト設計では **BDD（振る舞い駆動開発）スタイル** を採用し、可読性・保守性を重視した構造に移行。

#### 🛠 作業結果

- `defaultToolsConfig`, `validateConfig`, `schemas`, `validateTools` 含む **350行以上のユニット/E2Eテスト**を新規追加。
- `tools.ts` からのサンプルデータ・旧ロジックを削除し、責務を分離。]]></content>
        <author>
            <name>Furukawa Atsushi</name>
            <email>atsushifx@gmail.com</email>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[docs(2025-07): 2025年7月15日: `tools-config`モジュールの新規開発]]></title>
        <id>567de166bbbb5671e00fc5e6db26239eadca5ae2</id>
        <link href="https://github.com/atsushifx/til/commit/567de166bbbb5671e00fc5e6db26239eadca5ae2"/>
        <updated>2025-07-15T21:29:58.000Z</updated>
        <summary type="html"><![CDATA[docs(2025-07): 2025年7月15日: `tools-config`モジュールの新規開発

- docs/2025/2025-07.md:
  `tools=confgi`ジュール開発に関する作業]]></summary>
        <content type="html"><![CDATA[docs/2025/2025-07.md

### 2025年7月15日 - TIL開発 (`tools-config`モジュールの開発)

#### ValibotによるSchema設計とパス検証の実装

`ValibotP を活用して設定のスキーマを厳密に定義し、柔軟な構文バリデーションを設計。
パス検証では、Windows/Unix 両対応の正規表現を導入し、安全な設定値だけを受け入れる仕組みに。

#### デフォルト設定の導入と設計の初期化

`.tools/bin`や`.tools/tmp`など、現実的な初期ディレクトリ構成を提案として組み込み。
ツール 9 種を初期値として登録し、設定なしでも最低限動作する堅牢性を確保。]]></content>
        <author>
            <name>Furukawa Atsushi</name>
            <email>atsushifx@gmail.com</email>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[docs(2025-07.md): 2025年7月14に理: @esta-core/tools-configパッケージの初期設定とガイドラインをドキュメント化]]></title>
        <id>0c46f0e99bf4ad5c0eccc44497423be8095bdd89</id>
        <link href="https://github.com/atsushifx/til/commit/0c46f0e99bf4ad5c0eccc44497423be8095bdd89"/>
        <updated>2025-07-14T15:46:13.000Z</updated>
        <summary type="html"><![CDATA[docs(2025-07.md): 2025年7月14に理: @esta-core/tools-configパッケージの初期設定とガイドラインをドキュメント化

- docs/2025/2025-07.md:
  @esta-core/tools-configパッケージの初期設定
  仕様書運用用ガイドライン作成]]></summary>
        <content type="html"><![CDATA[docs/2025/2025-07.md

### 2025年7月14日 -- ESTA (Tools Configモジュール初期セットアップ、仕様書整備)

#### `@esta-core/tools-config` セットアップ

- 初期構造の scaffold:
  - `configs/`, `src/`, `tests`/ ディレクトリ群整備
  - `tsconfig.json`, `package.json`, ビルド・リント・テストスクリプト定義

- package 情報定義:
  - name: `@esta-core/tools-config`
  - description:「インストールツール設定を取得・生成するための専用モジュール」]]></content>
        <author>
            <name>Furukawa Atsushi</name>
            <email>atsushifx@gmail.com</email>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[docs(2025-07): 2025年7月12日: 統一エラーハンドリングを備えたESTA設定ローダーの強化]]></title>
        <id>7481315a61af81ef7b2b4a4731de51bae8263aba</id>
        <link href="https://github.com/atsushifx/til/commit/7481315a61af81ef7b2b4a4731de51bae8263aba"/>
        <updated>2025-07-12T16:07:29.000Z</updated>
        <summary type="html"><![CDATA[docs(2025-07): 2025年7月12日: 統一エラーハンドリングを備えたESTA設定ローダーの強化

- docs/2025/2025-07.md:
  マルチベースネーム検索、プロジェクトディレクトリ対応検索
  拡張子なしファイルのJSONCデフォルト解析を追加
  解析エラーやIOエラーをExitErrorでラップする統一エラーハンドリングを導入し、パーサー層と実行層の役割分担を明確化
  コンフィグファイル探索、解析失敗時のエラーラップ、拡張子なしコンフィグファイルの適切な解析に関するテストを追加
  関心の分離およびデフォルトコンフィグの重要性を強調し、使いやすさとテスト容易性を向上]]></summary>
        <content type="html"><![CDATA[docs/2025/2025-07.md

### 2025年7月12日 -- ESTA (Config Loader 強化、リファクタリング)

#### 課題

- 複数ベース名（`estarc`, `esta.config`）の探索
- 拡張子なしファイルを JSONC 既定で読み込み
- `USER`/`SYSTEM` に加え `PROJECT` ディレクトリ探索が必要
- パースエラー・未検出時のテストが未カバー
- ExitError vs ParseError の責務設計迷走
- GHA で設定ファイル任意化・デフォルト設定の要望

#### 実装内容]]></content>
        <author>
            <name>Furukawa Atsushi</name>
            <email>atsushifx@gmail.com</email>
        </author>
    </entry>
</feed>
